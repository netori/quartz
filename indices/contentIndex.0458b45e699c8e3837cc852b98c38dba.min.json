{"/":{"title":"index","content":"\n# Technical Information\n[[writeup/Beat Angel Escalayer R|Beat Angel Escalayer R]]\n\n[[writeup/Rance IX|Rance IX]]\n\n[[writeup/System Virtual Machine|System VM]]\n\n","lastmodified":"2023-03-11T05:50:52.11329549Z","tags":null},"/writeup/Beat-Angel-Escalayer-R":{"title":"Beat Angel Escalayer R","content":"## Abstract\nBeat Angel Escalayer R (*BEAR*) is a game made by AliceSoft, and its instructions are interprepted using Alicesoft's proprietary virtual machine (VM): [[writeup/System Virtual Machine|System]]. \n\n*BEAR* has turn-based battles between player-controlled characters and AI opponents. After crafting an exploit for [[writeup/Rance IX|Rance IX]], I then looked at this game due to its AntiCheat features. Specfically, the AntiCheat stores an encrypted copy of data to a buffer, performs a comparison between the copy and new data, and triggers a death flag if there's an inequality, otherwise, the encrypted copy is replaced with the new data. This death flag causes the character to die on the next turn.\n\nI utilized [[writeup/System Virtual Machine#Tools|tools]] designed for the System architecture combined with my previous knowledge to craft a simple exploit for *BEAR*. Largely reminiscent of ACTk for Unity.\n\n## Decompile *ain* file\n``` c#\nint C_INT::Get()\n{\n\tSH_LOCALDELETE(0);\n\tC_VALUE_ENCRYPTION cValueEncryption = SH_LOCALCREATE(0, 194);\n\tint nXorKey = this.GetKey();\n\tint nValue = cValueEncryption.Decryption(this.m_nCode, nXorKey, this.GetCodePattern());\n\tint nBackUp = cValueEncryption.Decryption(this.m_nBackUpCode, nXorKey, this.GetBackUpCodePattern());\n\tif (!system.IsDebugMode())\n\t{\n\t\tif (nValue != nBackUp)\n\t\t{\n\t\t\t■チート疑惑設定(true); //Cheat Suspected\n\t\t\tnValue = 0;\n\t\t}\n\t\tif (this.m_nValue != nValue)\n\t\t{\n\t\t\t■チート疑惑設定(true); //Cheat Suspected\n\t\t}\n\t\treturn nValue;\n\t}\n\tif (this.m_nValue != nValue)\n\t{\n\t\tthis.Set(this.m_nValue);\n\t}\n\treturn this.m_nValue;\n\treturn 0;\n}\n```","lastmodified":"2023-03-11T05:50:52.11329549Z","tags":null},"/writeup/Rance-IX":{"title":"Rance IX","content":"## Abstract\nRance IX is a game made by AliceSoft, and its instructions are interpreted using Alicesoft's proprietary virtual machine (VM): [[writeup/System Virtual Machine|System4]]. \n\nI crafted an exploit for Rance IX by determining where and how the System interpreter fetches instructions, how these instructions are decoded, and finally writing my own scripts to rewrite how these instructions are executed.\n\n## Binary Analysis\nReading through [[writeup/System Virtual Machine#System4 Analysis|System4 Analysis]]\n\n### Inside a Handler\nUsing [Cheat Engine](https://cheatengine.org/), I scanned for basic character properties and set watchpoints to determine any access. \n\n### Finding Entry\n\n![Rance-VM-Entry](images/ranceix-vm-entry.png)\n\n### Loop\n\n```asm\n00575D20 | mov eax,dword ptr ds:[esi+224]                     |\n00575D26 | movzx ecx,word ptr ds:[eax]                        |\n00575D29 | add eax,2                                          | breakif(ecx == 0x5C)\n00575D2C | push ecx                                           |\n00575D2D | mov ecx,esi                                        |\n00575D2F | mov dword ptr ds:[esi+224],eax                     |\n00575D35 | call \u003crance9.vm_entry\u003e                             |\n00575D3A | cmp dword ptr ds:[esi+234],0                       |\n00575D41 | je \u003crance9.vm_loop\u003e                                |\n00575D43 | jmp rance9.575C50                                  |\n```\n\n\n## Exploit Development\n\n\n\n## Credits\n-   **nunuhara, kichikuou, OPNA2608, and toufuguy** - Thank you all for your work regarding Alicesoft's proprietary engine and file formats. I would not have been able to make any key analyses without the use of your tools. Thank you so much for sharing your work since I have definitely learned a lot about virtual machine architecture and the System engine. \n-   **SomeLoliCatGirl** - Thank you for the wonderful AIN to bytecode decompiler. Your decompiler helped me tremendously with my analysis because I was able to locate where the bytecode was being interpreted and where it was being stored. As a result, I was able to craft my own custom bytecode injections, and effectively localize myself within the System VM architecture without doing much guessing.\n-   **Tim Blazytko** - Great educational video regarding analysis on VM architecture! \n-   **FamousAnos** - Thank you for the save!\n-   **Darkbyte and contributors** - Obviously...","lastmodified":"2023-03-11T05:50:52.11329549Z","tags":null},"/writeup/System-Virtual-Machine":{"title":"System Virtual Machine","content":"## Abstract\nSystem is a process virtual machine designed by AliceSoft to increase accessibility between different computer platforms. \n\n\u003e [!quote] Brief by [AliceSoft Fandom](https://alicesoft.fandom.com/wiki/System)\n\u003e\n\u003e **System** is a series of OS/VM hybrids that was designed by [Alice Soft](https://www.alicesoft.com/) to cope with porting their games across different computer platforms. This was especially important in the early days of Alice Soft's history, when there were multiple prevalent families of computers ([PC-98](http://en.wikipedia.org/wiki/NEC_PC-9801 \"wikipedia:NEC PC-9801\"), [x68k](http://en.wikipedia.org/wiki/x68k \"wikipedia:x68k\"), [FM-Towns](http://en.wikipedia.org/wiki/FM-Towns \"wikipedia:FM-Towns\") etc) competing on the Japanese PC market. A similar strategy was used by other developers at the time, such as [Infocom](http://en.wikipedia.org/wiki/Infocom \"wikipedia:Infocom\")'s famous Z-Machine interpreter.\n\n## Environment\nSystem is a virtual machine that interprets Alicesoft's proprietary game files (*.ain*, *.jaf*, *.jam*, etc.).\n\n![System-Interprepter](images/system42-interprepter.png)*A graph disassembly produced by IDA of the System VM.*\n\nThe above graph is a portion of the System interpreter; it's a gargantuan switch-case statement (with over 100 cases), and each case pertains to a particular bytecode that the System interpreter will execute. The execution units that are assigned to a specific bytecode are commonly referred to as handlers.  \n\nA common practice in reverse-engineering virtualized malware, or virtual machines is to follow a process called _lifting, translating, and repackaging_; whereby, the reverse engineer determines exactly what each handler does (_lifting_), somehow convert the information into a language that the CPU and disassemblers understand (_translating_), and finally repackaging the binary (_repackaging_). It's tedious and complicated, but there already are existing tools for the System VM.\n\n## System4 Analysis\nSystem4 is modeled after heap virtual machine architecture. It has an entry and an exit, calculations that are applied to datum located inside its memory heap, and a dispatcher to individual handlers for some inputted bytecode. These core concepts can be explained [here](https://www.youtube.com/watch?v=b6udPT79itk).\n\n### `CJaffaVM`\n`CJaffaVM` (denoted by RTTI) is an object that governs the System virtual machine. There is only **one** instance of this object; moreover, there is always a static address that points to this instance.\n\n### `CPage`\n`CPage` (denoted by RTTI) is an object that contains game variables and in-game values. There are at least a hundred of these instances.\n\n### `CPage` Array\nThe `CPage` Array contains all `CPage` instances.\n\n## Resources\nThe following hyperlinks lead to some insightful references to the System VM.\n\n### Tools\n- [alice-tools](https://github.com/nunuhara/alice-tools) - Incredibly useful tool for extracting/editing files from AliceSoft games.\n- [ain decompiler](https://github.com/UserUnknownFactor/AinDecompiler) -  Fantastic tool developed by **SomeLoliCatGirl** that decompiles *ain* file formats into native System bytecode.\n\n### General\n- [haniwa.technology](https://haniwa.technology/) - This site collects technical information and resources relating to games and game engines developed by AliceSoft.\n- [xsystem4](https://github.com/nunuhara/xsystem4) - System4 for UNIX-like operating systems\n\n### Uses System\n- [[Beat Angel Escalayer R]]\n- The Rance Series\n\t- [[writeup/Rance IX |Rance IX]]","lastmodified":"2023-03-11T05:50:52.11329549Z","tags":null}}